# Adapted from:
# - https://dev.to/vvo/a-rails-and-postgresql-setup-for-github-actions-ci-nc8;
# - https://github.community/t/postgres-error-could-not-connect-to-server-no-such-file-or-directory/18040/4;
# - https://dokku.com/docs/deployment/continuous-integration/github-actions/;
# - https://kevsoft.net/2020/06/10/running-github-action-steps-and-jobs-only-on-push-to-master.html.

name: CI/CD

env:
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_HOST: localhost
  RAILS_ENV: test
  SHOULD_DEPLOY: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    # Similar to docker-compose.yml but not the same.
    services:
      postgres:
        image: postgres:12.3-alpine
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        # Needed because the postgres container does not provide a healthcheck.
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      # `fromJSON` needed, here and below, to convert string environment
      # variable (which is always truthy) to boolean.
      - if: fromJSON(env.SHOULD_DEPLOY)
        name: Cancel all but latest deploy
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          all_but_latest: true
          access_token: ${{ github.token }}

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          # Required to avoid error as "pushing a git repository from a shallow
          # clone does not work" - see https://github.com/dokku/github-action.
          fetch-depth: 0
      - name: Install Ruby version specified in `.ruby-version`
        # This will use by default the .ruby-version file in your repository.
        uses: eregon/use-ruby-action@master
      - name: Install required apt packages
        run: |
          sudo apt-get -y install libpq-dev
      - name: Setup cache key and directory for gems cache
        uses: actions/cache@v2.1.7
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gem-use-ruby-${{ hashFiles('**/Gemfile.lock') }}
      - name: Read Node.js version to install from `.nvmrc`
        run: echo "##[set-output name=NVMRC;]$(cat .nvmrc)"
        id: nvm
      - name: Install required Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: "${{ steps.nvm.outputs.NVMRC }}"
      - name: Get Yarn cache directory path
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Setup cache key and directory for node_modules cache
        uses: actions/cache@v2.1.7
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      - name: Bundle install
        run: |
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
      - name: Yarn install
        run: yarn --frozen-lockfile
      - name: Run RSpec tests
        run: |
          bundle exec rake db:setup
          bundle exec rspec
      - name: Run `standard` for Ruby
        run: bundle exec standardrb
      - name: Smoke test `yarn run build`
        run: yarn run build

      - if: fromJSON(env.SHOULD_DEPLOY)
        name: Push to dokku
        uses: dokku/github-action@v1.0.2
        with:
          # Always force push so deploy can work no matter what was previously
          # deployed.
          git_push_flags: "--force"
          git_remote_url: "ssh://dokku@todo.bobwhitelock.co.uk/~/todotxt/"
          ssh_private_key: ${{ secrets.DEPLOY_SSH_PRIVATE_KEY }}
